// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('SquareVerifier.sol');

var fs = require('fs');

contract('Verifier', accounts => {
    const proofJson = fs.readFileSync("../zokrates/code/square/proof.json").toString().trim();

    const contractOwnerAccount = accounts[0];
    const testAccount1 = accounts[1];
    const testAccount2 = accounts[2];

    const tokensToMint = 4;
    var tokenNames = [tokensToMint];
    var contract;
    var proof = JSON.parse(proofJson);;

    before('setup contract', async () => {
        contract = await Verifier.new({from: contractOwnerAccount});
        // console.log('proof', proof);
        // console.log('proof.proof', proof.proof);
    });

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it('should verify with correct proof', async function() {
        let result = await contract.verifyTx.call(proof.proof.a, proof.proof.b, proof.proof.c, proof.inputs);
        //console.log(result);
        assert(result, true, 'Invalid Proof');        
    })

    // Test verification with incorrect proof
    it('should not verify with incorrect proof', async function () { 
        proof.proof.c[0] = "0x04f12269";
        //console.log('proof', proof);
        try {
            let result = await contract.verifyTx.call(proof.proof.a, proof.proof.b, proof.proof.c, proof.inputs);            
            assert(result, false, 'Invalid Proof should fail but it passed');        
        } catch (error) {
            //console.log('error', error);
            assert(1, 1, 'Invalid Proof should fail but it passed');        
        }
    })

})